@mixin container{
    background-color: var(--white);
    border:var(--border-in-light);
    border-radius: 20px;
    box-shadow:var(--shadow);
    color: var(--black);
    background-color: var(--white);
    min-width: 600px;
    min-height: 370px;
    max-width: 1200px;
  
    display: flex;
    overflow: hidden;
    box-sizing: border-box;
    /*
    默认盒模型与 border-box 的区别：在 CSS 中，默认的盒模型是content-box。
    在这种模式下，元素的宽度和高度只包括内容区域，不包括边框（border）和内边距（padding）。
    而当设置为border-box时，元素的宽度和高度包括了内容、内边距和边框。
    例如，一个元素设置宽度为200px，如果是默认的content-box，当添加了10px的内边距和5px的边框后，
    这个元素在页面上实际占据的宽度会变为200px + 10px * 2（左右内边距） + 5px * 2（左右边框） = 230px。
    但如果是border-box，那么无论添加多少内边距和边框，这个元素在页面上始终占据200px的宽度。
    */

    width: var(--window-width);
    height: var(--window-height);
}

.container{
    @include container();
}

@media only screen and (min-width: 600px) {
    .tight-container {
      --window-width: 100vw;
      --window-height: var(--full-height);
      --window-content-width: calc(100% - var(--sidebar-width));
  
      @include container();
  
      max-width: 100vw;
      max-height: var(--full-height);
  
      border-radius: 0;
      border: 0;
    }
  }

  .sidebar {
    top: 0;
    width: var(--sidebar-width);
    box-sizing: border-box;
    padding: 20px;
    background-color: var(--second);
    display: flex;
    flex-direction: column;
    box-shadow: inset -2px 0px 2px 0px rgb(0, 0, 0, 0.05);
    position: relative;
    transition: width ease 0.05s;
    /*
    用户交互反馈：当用户与页面进行交互，导致元素宽度发生变化时，
    过渡效果可以提供直观的反馈，让用户更容易理解页面的变化。
    例如，在一个响应式导航菜单中，当用户点击一个按钮展开菜单时，
    菜单的宽度从 0 变为一个特定值，如果添加了过渡效果，菜单会平滑地展开，
    而不是突然出现，增强了用户体验。
    */
  
    .sidebar-header-bar {
      display: flex;
      margin-bottom: 20px;
  
      .sidebar-bar-button {
        flex-grow: 1;
  
        &:not(:last-child) {
          margin-right: 10px;
        }
      }
    }
    &:hover,
    &:active {
      .sidebar-drag {
        background-color: rgba($color: #000000, $alpha: 0.01);
  
        svg {
          opacity: 0.2;
        }
      }
    }
  }

  .new-chat-button {
    padding: 10px 14px;
    background-color: var(--white);
    border-radius: 10px;
    margin-bottom: 10px;
    box-shadow: var(--card-shadow);
    transition: background-color 0.3s ease;
    cursor: pointer;
    user-select: none;
    border: 2px solid transparent;
    position: relative;
    content-visibility: auto;
  }

  .new-chat-button:hover {
    background-color: var(--hover-color);
  }


  //侧边栏拖动
  .sidebar-drag {
    position: absolute;
    top: 0;
    right: 0;
    height: 100%;
    width: 14px;
    background-color: rgba($color: #000000, $alpha: 0);
    cursor: ew-resize;
    /*
    ew-resize表示水平调整大小的光标。
    当鼠标指针位于应用了这个样式的元素上时，光标会显示为一个左右指向的双箭头，
    通常表示该元素可以在水平方向上进行调整大小的操作。
    */
    transition: all ease 0.3s;
    display: flex;
    align-items: center;
  
    svg {
      opacity: 0;
      margin-left: -2px;
    }
  }

  .window-content {
    width: var(--window-content-width);
    height: 100%;
    display: flex;
    flex-direction: column;
  }

  .mobile {
    display: none;
  }

  //CSS 中的媒体查询语句，用于针对特定的屏幕条件应用特定的样式规则。
  //只有当屏幕宽度小于或等于 600 像素时，这些样式才会生效。
  @media only screen and (max-width: 600px) {
    .container {
      min-height: unset;
      min-width: unset;
      max-height: unset;
      min-width: unset;
      border: 0;
      border-radius: 0;
    }
  
    .sidebar {
      position: absolute;
      left: -100%;
      z-index: 1000;
      height: var(--full-height);
      transition: all ease 0.3s;
      box-shadow: none;
    }
  
    .sidebar-show {
      left: 0;
    }
  
    .mobile {
      display: block;
    }
  }

  //侧边栏头部
  .sidebar-header {
    position: relative;
    padding-top: 20px;
    padding-bottom: 20px;
  }
  
  .sidebar-logo {
    position: absolute;
    right: 0;
    bottom: 18px;
  }
  
  .sidebar-title {
    font-size: 20px;
    font-weight: bold;
    animation: slide-in ease 0.3s;
  }
  
  .sidebar-sub-title {
    font-size: 12px;
    font-weight: 400;
    animation: slide-in ease 0.3s;
  }
  
  .sidebar-body {
    flex: 1;
    overflow: auto;
    overflow-x: hidden;
  }

  .chat-list {
    margin-top: 20px;
  }
  
  .chat-item {
    padding: 10px 14px;
    background-color: var(--white);
    border-radius: 10px;
    margin-bottom: 10px;
    box-shadow: var(--card-shadow);
    transition: background-color 0.3s ease;
    cursor: pointer;
    user-select: none;
    border: 2px solid transparent;
    position: relative;
    content-visibility: auto;
  }
  
  .chat-item:hover {
    background-color: var(--hover-color);
  }
  
  .chat-item-selected {
    border-color: var(--primary);
  }
  
  .chat-item-title {
    font-size: 14px;
    font-weight: bolder;
    display: block;
    width: calc(100% - 15px);
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    animation: slide-in ease 0.3s;
  }
  
  .chat-item-delete {
    position: absolute;
    top: 0;
    right: 0;
    transition: all ease 0.3s;
    opacity: 0;
    cursor: pointer;
  }
  
  //当具有.chat-item类的元素处于鼠标悬停状态时，其直接子元素具有.chat-item-delete类的元素应用后续的样式规则。
  .chat-item:hover > .chat-item-delete {
    opacity: 0.5;
    transform: translateX(-4px);//使用 CSS 的transform属性，将子元素在水平方向上向左移动 4 像素（translateX(-4px)）。这种轻微的位移可以进一步增强交互效果，吸引用户的注意力。
  }

  .chat-item:hover > .chat-item-delete:hover {
    opacity: 1;//opacity: 1;将子元素的不透明度设置为 1，即完全不透明。这意味着当用户将鼠标悬停在聊天项上，并且进一步将鼠标悬停在聊天项的删除按钮上时，删除按钮会变为完全不透明的状态。
  }



  .chat-item-info {
    display: flex;
    justify-content: space-between;
    color: rgb(166, 166, 166);
    font-size: 12px;
    margin-top: 8px;
    animation: slide-in ease 0.3s;
  }
  
  .chat-item-count,
  .chat-item-date {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }
  
  .narrow-sidebar {
    .sidebar-title,
    .sidebar-sub-title {
      display: none;
    }
    .sidebar-logo {
      position: relative;
      display: flex;
      justify-content: center;
    }
  
    .sidebar-header-bar {
      flex-direction: column;
  
      .sidebar-bar-button {
        &:not(:last-child) {
          margin-right: 0;
          margin-bottom: 10px;
        }
      }
    }
  
    .chat-item {
      padding: 0;
      min-height: 50px;
      display: flex;
      justify-content: center;
      align-items: center;
      transition: all ease 0.3s;
      overflow: hidden;
  
      &:hover {
        .chat-item-narrow {
          transform: scale(0.7) translateX(-50%);
        }
      }
    }
  
    .chat-item-narrow {
      line-height: 0;
      font-weight: lighter;
      color: var(--black);
      transform: translateX(0);
      transition: all ease 0.3s;
      padding: 4px;
      display: flex;
      flex-direction: column;
      justify-content: center;
  
      .chat-item-avatar {
        display: flex;
        justify-content: center;
        opacity: 0.2;
        position: absolute;
        transform: scale(4);
      }
  
      .chat-item-narrow-count {
        font-size: 24px;
        font-weight: bolder;
        text-align: center;
        color: var(--primary);
        opacity: 0.6;
      }
    }
  
    .sidebar-tail {
      flex-direction: column-reverse;
      align-items: center;
  
      .sidebar-actions {
        flex-direction: column-reverse;
        align-items: center;
  
        .sidebar-action {
          margin-right: 0;
          margin-top: 15px;
        }
      }
    }
  }
  
  .sidebar-tail {
    display: flex;
    justify-content: space-between;
    padding-top: 20px;
  }
  
  .sidebar-actions {
    display: inline-flex;
  }
  
  .sidebar-action:not(:last-child) {
    margin-right: 15px;
  }
  
  .loading-content {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    height: 100%;
    width: 100%;
  }
  
  .rtl-screen {
    direction: rtl;
  }


